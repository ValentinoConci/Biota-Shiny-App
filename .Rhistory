shiny::runApp('Biota_83p_1_0')
runApp('Biota_83p_1_0')
library(shiny)
library(shinyjs)
library(DBI)
library(RMariaDB)  # Usar RMariaDB en vez de RMySQL
library(DT)
runApp('Biota_83p_1_0')
con <- dbConnect(
RMariaDB::MariaDB(),  # Usar MariaDB en vez de MySQL
dbname = "Biota_83p_1_0",
host = "localhost",
user = "root",     # cambiá por tu user
password = "Anclus_28" # cambiá por tu pass
)
runApp('Biota_83p_1_0')
biota_ui()
biota_ui
biota_ui <- fluidPage(
titlePanel(
div(
style = "display: flex; align-items: center; gap: 20px;",
tags$img(src = "biota_logo.png", height = "60px"),
#h2("BIOTA Dashboard - Vista Inicial")
)
),
tabsetPanel(
tabPanel("Pacientes", DTOutput("tabla_pacientes")),
tabPanel("Metadata", DTOutput("tabla_metadata")),
tabPanel("QC Metrics", DTOutput("tabla_qc_metrics")),
tabPanel("Abundance Species", DTOutput("tabla_abundance_species")),
tabPanel("GC Counts", DTOutput("tabla_gc_counts")),
tabPanel("Pathways Values", DTOutput("tabla_pathways_values")),
tabPanel("Pathways Description", DTOutput("tabla_pathways_description"))
)
)
biota_ui()
biota_ui
str(tablas)
tablas <- list(
pacientes = dbReadTable(con, "pacientes"),
metadata = dbReadTable(con, "metadata"),
qc_metrics = dbReadTable(con, "qc_metrics"),
abundance_species = dbReadTable(con, "abundance_species"),
gc_counts = dbReadTable(con, "gc_counts"),
pathways_values = dbReadTable(con, "pathways_values"),
pathways_description = dbReadTable(con, "pathways_description")
)
#guardamos los usuarios para accesos
usuarios <- data.frame(
usuario = c("biota_user", "medico_user", "paciente_user"),
clave = c("1234", "medico", "paciente"),
tipo = c("biota", "medico", "paciente"),
stringsAsFactors = FALSE
)
render_tabla <- function(data) {
datatable(data, filter = 'top', extensions = 'Buttons',
options = list(dom = 'Bfrtip',buttons = c('copy', 'csv', 'excel'), scrollX = TRUE, scrollY = '400px',
pageLength = 15, lengthMenu = c(5, 10, 15, 25, 50, 100), autoWidth = TRUE),
class = 'display nowrap stripe hover', rownames = FALSE)
}
ui <- fluidPage(
useShinyjs(),
# Estilo general
tags$head(
tags$style(HTML("
.login-background {
background-color: #e0f7fa;
height: 100vh;
width: 100vw;
display: flex;
justify-content: center;
align-items: center;
}
#login_card {
max-width: 400px;
background-color: white;
padding: 30px;
border-radius: 15px;
box-shadow: 0 4px 8px rgba(0,0,0,0.1);
text-align: center;
}
#biota_logo {
max-width: 200px;
margin-bottom: 20px;
}
"))
),
# Login centrado con tarjeta
div(id = "login_div", class = "login-background",
div(id = "login_card",
img(src = "biota_logo.png", id = "biota_logo"),
textInput("usuario", "Usuario"),
passwordInput("clave", "Contraseña"),
actionButton("login_btn", "Ingresar", class = "btn btn-primary")
)
),
hidden(div(id = "app_div",
uiOutput("main_ui")  # la UI se cargará dinámicamente según tipo de usuario
))
)
server <- function(input, output, session) {
user_type <- reactiveVal(NULL)
observeEvent(input$login_btn, {
match <- usuarios[usuarios$usuario == input$usuario & usuarios$clave == input$clave, ]
if (nrow(match) == 1) {
user_type(match$tipo)
hide("login_div")
show("app_div")
removeClass("login_div", "login-background")
} else {
showModal(modalDialog(title = "Error","Usuario o contraseña incorrectos",
easyClose = TRUE, footer = NULL))
}
})
output$main_ui <- renderUI({
req(user_type())
if (user_type() == "biota") {
biota_ui
} else if (user_type() == "paciente") {
h3("Vista para pacientes (en desarrollo)")
} else if (user_type() == "medico") {
h3("Vista para médicos (en desarrollo)")
}
})
output$tabla_pacientes <- renderDT({ render_tabla(tablas$pacientes) })
output$tabla_metadata <- renderDT({ render_tabla(tablas$metadata) })
output$tabla_qc_metrics <- renderDT({ render_tabla(tablas$qc_metrics) })
output$tabla_abundance_species <- renderDT({ render_tabla(tablas$abundance_species) })
output$tabla_gc_counts <- renderDT({ render_tabla(tablas$gc_counts) })
output$tabla_pathways_values <- renderDT({ render_tabla(tablas$pathways_values) })
output$tabla_pathways_description <- renderDT({ render_tabla(tablas$pathways_description) })
onStop(function() {dbDisconnect(con)})
}
# 5️⃣ Correr la app
shinyApp(ui, server)
runApp('Biota_83p_1_0')
runApp('Biota_83p_1_0')
shiny::runApp('Biota_83p_1_0')
con <- dbConnect(
RMariaDB::MariaDB(),  # Usar MariaDB en vez de MySQL
dbname = "Biota_83p_1_0",
host = "localhost",
user = "root",     # cambiá por tu user
password = "Anclus_28" # cambiá por tu pass
)
tablas <- list(
pacientes = dbReadTable(con, "pacientes"),
metadata = dbReadTable(con, "metadata"),
qc_metrics = dbReadTable(con, "qc_metrics"),
abundance_species = dbReadTable(con, "abundance_species"),
gc_counts = dbReadTable(con, "gc_counts"),
pathways_values = dbReadTable(con, "pathways_values"),
pathways_description = dbReadTable(con, "pathways_description")
)
View(tablas)
tablas$pathways_values
runApp('Biota_83p_1_0')
runApp('Biota_83p_1_0')
runApp('Biota_83p_1_1')
shiny::runApp('Biota_83p_1_1')
runApp('Biota_83p_1_1')
runApp('Biota_83p_1_1')
shiny::runApp('Biota_83p_1_1')
runApp('Biota_83p_1_1')
runApp('Biota_83p_1_1')
runApp('Biota_83p_1_1')
source("C:/Users/valen/OneDrive/Documents/Biota_83p_1_1/app.R")
runApp('Biota_83p_1_1')
source("C:/Users/valen/OneDrive/Documents/Biota_83p_1_1/app.R")
runApp('Biota_83p_1_1')
runApp('Biota_83p_1_1')
runApp('Biota_83p_1_1')
runApp('Biota_83p_1_1')
runApp('Biota_83p_1_1')
runApp('Biota_83p_1_1')
runApp('Biota_83p_1_1')
